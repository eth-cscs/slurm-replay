diff -rBu --new-file slurm-17.02.9.org/auxdir/x_ac_clock.m4 slurm-17.02.9.new/auxdir/x_ac_clock.m4
--- slurm-17.02.9.org/auxdir/x_ac_clock.m4	1970-01-01 01:00:00.000000000 +0100
+++ slurm-17.02.9.new/auxdir/x_ac_clock.m4	2018-01-29 09:54:28.000000000 +0100
@@ -0,0 +1,60 @@
+##*****************************************************************************
+#  AUTHOR:
+#    Maxime Martinasso <martinasso@cscs.ch>
+#
+#  SYNOPSIS:
+#    X_AC_CLOCK
+#
+#  DESCRIPTION:
+#    Use a pre-define clock for job management, used for replaying traces.
+##*****************************************************************************
+
+AC_DEFUN([X_AC_CLOCK],
+[
+  AC_ARG_WITH(
+    [clock],
+    AS_HELP_STRING(--with-clock=PATH,Specify path to clock installation),
+    [AS_IF([test "x$with_clock" != xno],[_x_ac_clock_dirs="$with_clock"])])
+
+  if [test "x$with_clock" = xno]; then
+     AC_MSG_WARN([support for clock disabled])
+  else
+    AC_CACHE_CHECK(
+      [for clock installation],
+      [x_ac_cv_clock_dir],
+      [
+        for d in $_x_ac_clock_dirs; do
+          test -d "$d" || continue
+          _x_ac_clock_cppflags_save="$CPPFLAGS"
+          CPPFLAGS="-I$d $CPPFLAGS"
+          _x_ac_clock_libs_save="$LIBS"
+          LIBS="-L$d -lshmemclock -lrt $LIBS"
+          AC_LINK_IFELSE(
+              [AC_LANG_SOURCE([[
+              #include <shmemclock.h>
+              int main() { open_rdonly_shmemclock(); }]])],[
+              AS_VAR_SET(x_ac_cv_clock_dir, $d)],[])
+          CPPFLAGS="$_x_ac_clock_cppflags_save"
+          LIBS="$_x_ac_clock_libs_save"
+          test -n "$x_ac_cv_clock_dir" && break
+        done
+      ])
+
+    if test -z "$x_ac_cv_clock_dir"; then
+      AC_MSG_WARN([unable to locate clock installation])
+    else
+      clock_CPPFLAGS="-I$x_ac_cv_clock_dir"
+      if test "$ac_with_rpath" = "yes"; then
+        clock_LDFLAGS="-Wl,-rpath -Wl,$x_ac_cv_clock_dir -L$x_ac_cv_clock_dir"
+      else
+        clock_LDFLAGS="-L$x_ac_cv_clock_dir"
+      fi
+      clock_LIBS="-lshmemclock -lrt"
+      AC_DEFINE(HAVE_clock, 1, [Define to 1 if clock library found])
+    fi
+
+    AC_SUBST(clock_LIBS)
+    AC_SUBST(clock_CPPFLAGS)
+    AC_SUBST(clock_LDFLAGS)
+  fi
+])
diff -rBu --new-file slurm-17.02.9.org/configure.ac slurm-17.02.9.new/configure.ac
--- slurm-17.02.9.org/configure.ac	2018-01-29 09:40:28.000000000 +0100
+++ slurm-17.02.9.new/configure.ac	2018-01-29 09:54:28.000000000 +0100
@@ -228,6 +228,7 @@
 AX_CHECK_ZLIB([], [])
 X_AC_LZ4
 X_AC_HWLOC
+X_AC_CLOCK
 X_AC_PMIX
 X_AC_FREEIPMI
 X_AC_SLURM_SEMAPHORE
@@ -527,6 +528,7 @@
 		 src/plugins/core_spec/none/Makefile
 		 src/plugins/crypto/Makefile
 		 src/plugins/crypto/munge/Makefile
+		 src/plugins/crypto/none/Makefile
 		 src/plugins/crypto/openssl/Makefile
 		 src/plugins/ext_sensors/Makefile
 		 src/plugins/ext_sensors/rrd/Makefile
diff -rBu --new-file slurm-17.02.9.org/src/plugins/crypto/Makefile.am slurm-17.02.9.new/src/plugins/crypto/Makefile.am
--- slurm-17.02.9.org/src/plugins/crypto/Makefile.am	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/plugins/crypto/Makefile.am	2018-01-29 09:54:28.000000000 +0100
@@ -1,3 +1,3 @@
 # Makefile for crypto plugins
 
-SUBDIRS = munge openssl
+SUBDIRS = munge openssl none
diff -rBu --new-file slurm-17.02.9.org/src/plugins/crypto/none/Makefile.am slurm-17.02.9.new/src/plugins/crypto/none/Makefile.am
--- slurm-17.02.9.org/src/plugins/crypto/none/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ slurm-17.02.9.new/src/plugins/crypto/none/Makefile.am	2018-01-29 09:54:28.000000000 +0100
@@ -0,0 +1,13 @@
+# Makefile for crypto/none plugin
+
+AUTOMAKE_OPTIONS = foreign
+
+PLUGIN_FLAGS = -module -avoid-version --export-dynamic
+
+AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/src/common
+
+pkglib_LTLIBRARIES = crypto_none.la
+
+# None crypto plugin
+crypto_none_la_SOURCES = crypto_none.c
+crypto_none_la_LDFLAGS = $(SO_LDFLAGS) $(PLUGIN_FLAGS)
diff -rBu --new-file slurm-17.02.9.org/src/plugins/crypto/none/crypto_none.c slurm-17.02.9.new/src/plugins/crypto/none/crypto_none.c
--- slurm-17.02.9.org/src/plugins/crypto/none/crypto_none.c	1970-01-01 01:00:00.000000000 +0100
+++ slurm-17.02.9.new/src/plugins/crypto/none/crypto_none.c	2018-02-28 17:37:12.000000000 +0100
@@ -0,0 +1,118 @@
+/*****************************************************************************\
+ *  crypto_none.c - none based cryptographic signature plugin
+\*****************************************************************************/
+
+#include "config.h"
+
+#include <inttypes.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "slurm/slurm_errno.h"
+
+#include "src/common/slurm_protocol_api.h"
+#include "src/common/xassert.h"
+#include "src/common/xmalloc.h"
+#include "src/common/xstring.h"
+
+#define RETRY_COUNT		20
+#define RETRY_USEC		100000
+
+/*
+ * These variables are required by the generic plugin interface.  If they
+ * are not found in the plugin, the plugin loader will ignore it.
+ *
+ * plugin_name - a string giving a human-readable description of the
+ * plugin.  There is no maximum length, but the symbol must refer to
+ * a valid string.
+ *
+ * plugin_type - a string suggesting the type of the plugin or its
+ * applicability to a particular form of data or method of data handling.
+ * If the low-level plugin API is used, the contents of this string are
+ * unimportant and may be anything.  SLURM uses the higher-level plugin
+ * interface which requires this string to be of the form
+ *
+ *	<application>/<method>
+ *
+ * where <application> is a description of the intended application of
+ * the plugin (e.g., "auth" for SLURM authentication) and <method> is a
+ * description of how this plugin satisfies that application.  SLURM will
+ * only load authentication plugins if the plugin_type string has a prefix
+ * of "auth/".
+ *
+ * plugin_version - an unsigned 32-bit integer containing the Slurm version
+ * (major.minor.micro combined into a single number).
+ */
+const char plugin_name[]        = "Null cryptographic signature plugin";
+const char plugin_type[]        = "crypto/none";
+const uint32_t plugin_version   = SLURM_VERSION_NUMBER;
+
+/*
+ * init() is called when the plugin is loaded, before any other functions
+ * are called.  Put global initialization here.
+ */
+extern int init ( void )
+{
+	verbose("%s loaded", plugin_name);
+	return SLURM_SUCCESS;
+}
+
+/*
+ * fini() is called when the plugin is unloaded,
+ * free any global memory allocations here to avoid memory leaks.
+ */
+extern int fini ( void )
+{
+	verbose("%s unloaded", plugin_name);
+	return SLURM_SUCCESS;
+}
+
+extern void
+crypto_destroy_key(void *key)
+{
+    if (key)
+       xfree(key);
+}
+
+extern void *
+crypto_read_private_key(const char *path)
+{
+    char* private_key;
+    private_key = xmalloc(sizeof(unsigned char));
+
+	return (void *) private_key;
+}
+
+extern void *
+crypto_read_public_key(const char *path)
+{
+    char* public_key;
+    public_key = xmalloc(sizeof(unsigned char));
+
+	return (void *) public_key;
+}
+
+extern const char *
+crypto_str_error(int errnum)
+{
+    return "Errors are possible within the Null cryptographic plugin";
+}
+
+/* NOTE: Caller must xfree the signature returned by sig_pp */
+extern int
+crypto_sign(void * key, char *buffer, int buf_size, char **sig_pp,
+	    unsigned int *sig_size_p)
+{
+    *sig_pp = xmalloc(sizeof(unsigned char));
+	*sig_size_p = 1;
+	return 0;
+}
+
+extern int
+crypto_verify_sign(void * key, char *buffer, unsigned int buf_size,
+		   char *signature, unsigned int sig_size)
+{
+	return SLURM_SUCCESS;
+}
diff -rBu --new-file slurm-17.02.9.org/src/slurmctld/Makefile.am slurm-17.02.9.new/src/slurmctld/Makefile.am
--- slurm-17.02.9.org/src/slurmctld/Makefile.am	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmctld/Makefile.am	2018-01-29 09:54:28.000000000 +0100
@@ -4,7 +4,7 @@
 AUTOMAKE_OPTIONS = foreign
 CLEANFILES = core.*
 
-AM_CPPFLAGS = -I$(top_srcdir) $(BG_INCLUDES)
+AM_CPPFLAGS = -I$(top_srcdir) $(BG_INCLUDES) $(clock_CPPFLAGS)
 
 # noinst_LTLIBRARIES = libslurmctld.la
 # libslurmctld_la_LDFLAGS  = $(LIB_LDFLAGS) -module --export-dynamic
@@ -74,8 +74,8 @@
 
 slurmctld_LDADD = 				    \
 	$(top_builddir)/src/common/libdaemonize.la  \
-	$(top_builddir)/src/api/libslurm.o $(DL_LIBS)
-slurmctld_LDFLAGS = -export-dynamic $(CMD_LDFLAGS)
+	$(top_builddir)/src/api/libslurm.o $(DL_LIBS) $(clock_LIBS)
+slurmctld_LDFLAGS = -export-dynamic $(CMD_LDFLAGS) $(clock_LDFLAGS)
 
 force:
 $(slurmctld_LDADD) : force
diff -rBu --new-file slurm-17.02.9.org/src/slurmctld/controller.c slurm-17.02.9.new/src/slurmctld/controller.c
--- slurm-17.02.9.org/src/slurmctld/controller.c	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmctld/controller.c	2018-01-29 09:54:28.000000000 +0100
@@ -114,6 +114,7 @@
 #include "src/slurmctld/state_save.h"
 #include "src/slurmctld/trigger_mgr.h"
 
+#include <shmemclock.h>
 
 #define CRED_LIFE         60	/* Job credential lifetime in seconds */
 #define DEFAULT_DAEMONIZE 1	/* Run as daemon by default if set */
@@ -259,6 +260,9 @@
 	for (i = 3; i < cnt; i++)
 		close(i);
 
+    // setup discrete time
+    open_rdonly_shmemclock();
+
 	/*
 	 * Establish initial configuration
 	 */
diff -rBu --new-file slurm-17.02.9.org/src/slurmd/slurmd/Makefile.am slurm-17.02.9.new/src/slurmd/slurmd/Makefile.am
--- slurm-17.02.9.org/src/slurmd/slurmd/Makefile.am	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmd/slurmd/Makefile.am	2018-01-29 09:54:28.000000000 +0100
@@ -6,16 +6,16 @@
 sbin_PROGRAMS = slurmd
 
 AM_CPPFLAGS = -DLIBSLURM_SO=\"$(libdir)/libslurm.so\" \
-	-I$(top_srcdir) $(HWLOC_CPPFLAGS)
+	-I$(top_srcdir) $(HWLOC_CPPFLAGS) $(clock_CPPFLAGS)
 
 slurmd_LDADD = 					   \
 	$(top_builddir)/src/common/libdaemonize.la \
 	$(top_builddir)/src/bcast/libfile_bcast.la \
 	../common/libslurmd_common.o $(HWLOC_LIBS) \
 	$(top_builddir)/src/api/libslurm.o $(DL_LIBS)  \
-	../common/libslurmd_reverse_tree_math.la
+	../common/libslurmd_reverse_tree_math.la $(clock_LIBS)
 
-slurmd_LDFLAGS = -export-dynamic $(CMD_LDFLAGS) $(HWLOC_LDFLAGS) $(NUMA_LIBS)
+slurmd_LDFLAGS = -export-dynamic $(CMD_LDFLAGS) $(HWLOC_LDFLAGS) $(NUMA_LIBS) $(clock_LDFLAGS)
 
 SLURMD_SOURCES = \
 	slurmd.c slurmd.h \
diff -rBu --new-file slurm-17.02.9.org/src/slurmd/slurmd/slurmd.c slurm-17.02.9.new/src/slurmd/slurmd/slurmd.c
--- slurm-17.02.9.org/src/slurmd/slurmd/slurmd.c	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmd/slurmd/slurmd.c	2018-01-29 09:54:28.000000000 +0100
@@ -109,6 +109,8 @@
 #include "src/slurmd/slurmd/slurmd_plugstack.h"
 #include "src/slurmd/common/xcpuinfo.h"
 
+#include <shmemclock.h>
+
 #define GETOPT_ARGS	"bcCd:Df:hL:Mn:N:vV"
 
 #ifndef MAXHOSTNAMELEN
@@ -215,6 +217,8 @@
 	char time_stamp[256];
 	log_options_t lopts = LOG_OPTS_INITIALIZER;
 
+    open_rdonly_shmemclock();
+
 	/* NOTE: logfile is NULL at this point */
 	log_init(argv[0], lopts, LOG_DAEMON, NULL);
 
diff -rBu --new-file slurm-17.02.9.org/src/slurmd/slurmstepd/Makefile.am slurm-17.02.9.new/src/slurmd/slurmstepd/Makefile.am
--- slurm-17.02.9.org/src/slurmd/slurmstepd/Makefile.am	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmd/slurmstepd/Makefile.am	2018-01-29 09:54:28.000000000 +0100
@@ -5,13 +5,13 @@
 
 sbin_PROGRAMS = slurmstepd
 
-AM_CPPFLAGS = -I$(top_srcdir)
+AM_CPPFLAGS = -I$(top_srcdir) $(clock_CPPFLAGS)
 
 slurmstepd_LDADD = 				   \
 	$(top_builddir)/src/common/libdaemonize.la \
 	../common/libslurmd_common.o $(HWLOC_LDFLAGS) $(HWLOC_LIBS) \
 	$(top_builddir)/src/api/libslurm.o $(DL_LIBS) \
-	$(PAM_LIBS) $(UTIL_LIBS)
+	$(PAM_LIBS) $(UTIL_LIBS) $(clock_LIBS)
 
 slurmstepd_SOURCES = 	        	\
 	slurmstepd.c slurmstepd.h	\
@@ -27,7 +27,7 @@
 	multi_prog.c multi_prog.h	\
 	step_terminate_monitor.c step_terminate_monitor.h
 
-slurmstepd_LDFLAGS = -export-dynamic $(CMD_LDFLAGS)
+slurmstepd_LDFLAGS = -export-dynamic $(CMD_LDFLAGS) $(clock_LDFLAGS)
 
 force:
 $(slurmstepd_LDADD) : force
diff -rBu --new-file slurm-17.02.9.org/src/slurmd/slurmstepd/slurmstepd.c slurm-17.02.9.new/src/slurmd/slurmstepd/slurmstepd.c
--- slurm-17.02.9.org/src/slurmd/slurmstepd/slurmstepd.c	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmd/slurmstepd/slurmstepd.c	2018-01-29 09:54:28.000000000 +0100
@@ -71,6 +71,8 @@
 #include "src/slurmd/slurmstepd/slurmstepd.h"
 #include "src/slurmd/slurmstepd/slurmstepd_job.h"
 
+#include <shmemclock.h>
+
 static int _init_from_slurmd(int sock, char **argv, slurm_addr_t **_cli,
 			     slurm_addr_t **_self, slurm_msg_t **_msg,
 			     int *_ngids, gid_t **_gids);
@@ -106,6 +108,8 @@
 	int rc = 0;
 	char *launch_params;
 
+    open_rdonly_shmemclock();
+
 	if (_process_cmdline (argc, argv) < 0)
 		fatal ("Error in slurmstepd command line");
 
diff -rBu --new-file slurm-17.02.9.org/src/slurmdbd/Makefile.am slurm-17.02.9.new/src/slurmdbd/Makefile.am
--- slurm-17.02.9.org/src/slurmdbd/Makefile.am	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmdbd/Makefile.am	2018-01-29 09:55:24.000000000 +0100
@@ -4,13 +4,13 @@
 AUTOMAKE_OPTIONS = foreign
 CLEANFILES = core.*
 
-AM_CPPFLAGS = -I$(top_srcdir)
+AM_CPPFLAGS = -I$(top_srcdir) $(clock_CPPFLAGS)
 
 sbin_PROGRAMS = slurmdbd
 
 slurmdbd_LDADD = 					\
 	$(top_builddir)/src/common/libdaemonize.la \
-	$(top_builddir)/src/api/libslurm.o $(DL_LIBS)
+	$(top_builddir)/src/api/libslurm.o $(DL_LIBS) $(clock_LIBS)
 
 
 slurmdbd_SOURCES = 		\
@@ -25,7 +25,7 @@
 	slurmdbd.c  		\
 	slurmdbd.h
 
-slurmdbd_LDFLAGS = -export-dynamic $(CMD_LDFLAGS)
+slurmdbd_LDFLAGS = -export-dynamic $(CMD_LDFLAGS) $(clock_LDFLAGS)
 
 force:
 $(slurmdbd_LDADD) : force
diff -rBu --new-file slurm-17.02.9.org/src/slurmdbd/slurmdbd.c slurm-17.02.9.new/src/slurmdbd/slurmdbd.c
--- slurm-17.02.9.org/src/slurmdbd/slurmdbd.c	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/slurmdbd/slurmdbd.c	2018-01-29 09:57:43.000000000 +0100
@@ -71,6 +71,8 @@
 #include "src/slurmdbd/proc_req.h"
 #include "src/slurmdbd/backup.h"
 
+#include <shmemclock.h>
+
 /* Global variables */
 time_t shutdown_time = 0;		/* when shutdown request arrived */
 List registered_clusters = NULL;
@@ -131,6 +133,7 @@
 	void *db_conn = NULL;
 	assoc_init_args_t assoc_init_arg;
 
+    open_rdonly_shmemclock();
 	_init_config();
 	log_init(argv[0], log_opts, LOG_DAEMON, NULL);
 	if (read_slurmdbd_conf())
