diff -rBu --new-file slurm-17.02.9.org/auxdir/x_ac_clock.m4 slurm-17.02.9.new/auxdir/x_ac_clock.m4
--- slurm-17.02.9.org/auxdir/x_ac_clock.m4	1970-01-01 01:00:00.000000000 +0100
+++ slurm-17.02.9.new/auxdir/x_ac_clock.m4	2018-01-29 09:54:28.000000000 +0100
@@ -0,0 +1,60 @@
+##*****************************************************************************
+#  AUTHOR:
+#    Maxime Martinasso <martinasso@cscs.ch>
+#
+#  SYNOPSIS:
+#    X_AC_CLOCK
+#
+#  DESCRIPTION:
+#    Use a pre-define clock for job management, used for replaying traces.
+##*****************************************************************************
+
+AC_DEFUN([X_AC_CLOCK],
+[
+  AC_ARG_WITH(
+    [clock],
+    AS_HELP_STRING(--with-clock=PATH,Specify path to clock installation),
+    [AS_IF([test "x$with_clock" != xno],[_x_ac_clock_dirs="$with_clock"])])
+
+  if [test "x$with_clock" = xno]; then
+     AC_MSG_WARN([support for clock disabled])
+  else
+    AC_CACHE_CHECK(
+      [for clock installation],
+      [x_ac_cv_clock_dir],
+      [
+        for d in $_x_ac_clock_dirs; do
+          test -d "$d" || continue
+          _x_ac_clock_cppflags_save="$CPPFLAGS"
+          CPPFLAGS="-I$d $CPPFLAGS"
+          _x_ac_clock_libs_save="$LIBS"
+          LIBS="-L$d -lshmemclock -lrt $LIBS"
+          AC_LINK_IFELSE(
+              [AC_LANG_SOURCE([[
+              #include <shmemclock.h>
+              int main() { open_rdonly_shmemclock(); }]])],[
+              AS_VAR_SET(x_ac_cv_clock_dir, $d)],[])
+          CPPFLAGS="$_x_ac_clock_cppflags_save"
+          LIBS="$_x_ac_clock_libs_save"
+          test -n "$x_ac_cv_clock_dir" && break
+        done
+      ])
+
+    if test -z "$x_ac_cv_clock_dir"; then
+      AC_MSG_WARN([unable to locate clock installation])
+    else
+      clock_CPPFLAGS="-I$x_ac_cv_clock_dir"
+      if test "$ac_with_rpath" = "yes"; then
+        clock_LDFLAGS="-Wl,-rpath -Wl,$x_ac_cv_clock_dir -L$x_ac_cv_clock_dir"
+      else
+        clock_LDFLAGS="-L$x_ac_cv_clock_dir"
+      fi
+      clock_LIBS="-lshmemclock -lrt"
+      AC_DEFINE(HAVE_clock, 1, [Define to 1 if clock library found])
+    fi
+
+    AC_SUBST(clock_LIBS)
+    AC_SUBST(clock_CPPFLAGS)
+    AC_SUBST(clock_LDFLAGS)
+  fi
+])
diff -rBu --new-file slurm-17.02.9.org/configure.ac slurm-17.02.9.new/configure.ac
--- slurm-17.02.9.org/configure.ac	2018-01-29 09:40:28.000000000 +0100
+++ slurm-17.02.9.new/configure.ac	2018-01-29 09:54:28.000000000 +0100
@@ -228,6 +228,7 @@
 AX_CHECK_ZLIB([], [])
 X_AC_LZ4
 X_AC_HWLOC
+X_AC_CLOCK
 X_AC_PMIX
 X_AC_FREEIPMI
 X_AC_SLURM_SEMAPHORE
@@ -527,6 +528,7 @@
 		 src/plugins/core_spec/none/Makefile
 		 src/plugins/crypto/Makefile
 		 src/plugins/crypto/munge/Makefile
+		 src/plugins/crypto/none/Makefile
 		 src/plugins/crypto/openssl/Makefile
 		 src/plugins/ext_sensors/Makefile
 		 src/plugins/ext_sensors/rrd/Makefile
diff -rBu --new-file slurm-17.02.9.org/src/plugins/crypto/Makefile.am slurm-17.02.9.new/src/plugins/crypto/Makefile.am
--- slurm-17.02.9.org/src/plugins/crypto/Makefile.am	2018-01-29 09:40:29.000000000 +0100
+++ slurm-17.02.9.new/src/plugins/crypto/Makefile.am	2018-01-29 09:54:28.000000000 +0100
@@ -1,3 +1,3 @@
 # Makefile for crypto plugins
 
-SUBDIRS = munge openssl
+SUBDIRS = munge openssl none
diff -rBu --new-file slurm-17.02.9.org/src/plugins/crypto/none/Makefile.am slurm-17.02.9.new/src/plugins/crypto/none/Makefile.am
--- slurm-17.02.9.org/src/plugins/crypto/none/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ slurm-17.02.9.new/src/plugins/crypto/none/Makefile.am	2018-01-29 09:54:28.000000000 +0100
@@ -0,0 +1,13 @@
+# Makefile for crypto/none plugin
+
+AUTOMAKE_OPTIONS = foreign
+
+PLUGIN_FLAGS = -module -avoid-version --export-dynamic
+
+AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/src/common
+
+pkglib_LTLIBRARIES = crypto_none.la
+
+# None crypto plugin
+crypto_none_la_SOURCES = crypto_none.c
+crypto_none_la_LDFLAGS = $(SO_LDFLAGS) $(PLUGIN_FLAGS)
diff -rBu --new-file slurm-17.02.9.org/src/plugins/crypto/none/crypto_none.c slurm-17.02.9.new/src/plugins/crypto/none/crypto_none.c
--- slurm-17.02.9.org/src/plugins/crypto/none/crypto_none.c	1970-01-01 01:00:00.000000000 +0100
+++ slurm-17.02.9.new/src/plugins/crypto/none/crypto_none.c	2018-02-28 17:37:12.000000000 +0100
@@ -0,0 +1,118 @@
+/*****************************************************************************\
+ *  crypto_none.c - none based cryptographic signature plugin
+\*****************************************************************************/
+
+#include "config.h"
+
+#include <inttypes.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "slurm/slurm_errno.h"
+
+#include "src/common/slurm_protocol_api.h"
+#include "src/common/xassert.h"
+#include "src/common/xmalloc.h"
+#include "src/common/xstring.h"
+
+#define RETRY_COUNT		20
+#define RETRY_USEC		100000
+
+/*
+ * These variables are required by the generic plugin interface.  If they
+ * are not found in the plugin, the plugin loader will ignore it.
+ *
+ * plugin_name - a string giving a human-readable description of the
+ * plugin.  There is no maximum length, but the symbol must refer to
+ * a valid string.
+ *
+ * plugin_type - a string suggesting the type of the plugin or its
+ * applicability to a particular form of data or method of data handling.
+ * If the low-level plugin API is used, the contents of this string are
+ * unimportant and may be anything.  SLURM uses the higher-level plugin
+ * interface which requires this string to be of the form
+ *
+ *	<application>/<method>
+ *
+ * where <application> is a description of the intended application of
+ * the plugin (e.g., "auth" for SLURM authentication) and <method> is a
+ * description of how this plugin satisfies that application.  SLURM will
+ * only load authentication plugins if the plugin_type string has a prefix
+ * of "auth/".
+ *
+ * plugin_version - an unsigned 32-bit integer containing the Slurm version
+ * (major.minor.micro combined into a single number).
+ */
+const char plugin_name[]        = "Null cryptographic signature plugin";
+const char plugin_type[]        = "crypto/none";
+const uint32_t plugin_version   = SLURM_VERSION_NUMBER;
+
+/*
+ * init() is called when the plugin is loaded, before any other functions
+ * are called.  Put global initialization here.
+ */
+extern int init ( void )
+{
+	verbose("%s loaded", plugin_name);
+	return SLURM_SUCCESS;
+}
+
+/*
+ * fini() is called when the plugin is unloaded,
+ * free any global memory allocations here to avoid memory leaks.
+ */
+extern int fini ( void )
+{
+	verbose("%s unloaded", plugin_name);
+	return SLURM_SUCCESS;
+}
+
+extern void
+crypto_destroy_key(void *key)
+{
+    if (key)
+       xfree(key);
+}
+
+extern void *
+crypto_read_private_key(const char *path)
+{
+    char* private_key;
+    private_key = xmalloc(sizeof(unsigned char));
+
+	return (void *) private_key;
+}
+
+extern void *
+crypto_read_public_key(const char *path)
+{
+    char* public_key;
+    public_key = xmalloc(sizeof(unsigned char));
+
+	return (void *) public_key;
+}
+
+extern const char *
+crypto_str_error(int errnum)
+{
+    return "Errors are possible within the Null cryptographic plugin";
+}
+
+/* NOTE: Caller must xfree the signature returned by sig_pp */
+extern int
+crypto_sign(void * key, char *buffer, int buf_size, char **sig_pp,
+	    unsigned int *sig_size_p)
+{
+    *sig_pp = xmalloc(sizeof(unsigned char));
+	*sig_size_p = 1;
+	return 0;
+}
+
+extern int
+crypto_verify_sign(void * key, char *buffer, unsigned int buf_size,
+		   char *signature, unsigned int sig_size)
+{
+	return SLURM_SUCCESS;
+}
